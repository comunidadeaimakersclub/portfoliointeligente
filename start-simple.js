// Script de inicializa√ß√£o simples que n√£o depende de ES modules
// √ötil como √∫ltimo recurso de fallback

console.log("‚ö†Ô∏è Iniciando aplica√ß√£o em modo de compatibilidade...");

// Biblioteca de sistema para processos
const { spawn } = require('child_process');
const path = require('path');
const fs = require('fs');

// Vari√°veis de ambiente
process.env.NODE_ENV = 'production';

// Tenta diferentes abordagens para iniciar o servidor
try {
  console.log("üìÅ Verificando diret√≥rios e arquivos essenciais...");
  
  // Verifica se os diret√≥rios e arquivos essenciais existem
  const necessaryPaths = [
    'dist',
    'dist/index.js',
    'server',
    'shared'
  ];
  
  for (const p of necessaryPaths) {
    if (!fs.existsSync(p)) {
      console.error(`‚ùå Diret√≥rio ou arquivo n√£o encontrado: ${p}`);
    } else {
      console.log(`‚úÖ Encontrado: ${p}`);
    }
  }
  
  // Tenta iniciar o servidor da maneira mais simples poss√≠vel
  console.log("üöÄ Tentando iniciar o servidor...");
  
  const nodeProcess = spawn('node', ['dist/index.js'], {
    env: { ...process.env, NODE_ENV: 'production' },
    stdio: 'inherit'
  });
  
  nodeProcess.on('error', (err) => {
    console.error('‚ùå Erro ao iniciar o processo Node:', err);
    process.exit(1);
  });
  
  nodeProcess.on('exit', (code) => {
    if (code !== 0) {
      console.error(`‚ùå O processo Node saiu com c√≥digo ${code}`);
      process.exit(code || 1);
    }
  });
  
} catch (error) {
  console.error('‚ùå Erro fatal durante a inicializa√ß√£o:', error);
  process.exit(1);
}