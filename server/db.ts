import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import ws from "ws";
import * as schema from "@shared/schema";
import dotenv from 'dotenv';

// Carrega as vari√°veis de ambiente do arquivo .env
dotenv.config();

// Configura√ß√£o do WebSocket para o NeonDB
// Verifica se estamos em produ√ß√£o para desativar WebSockets se necess√°rio
// Para evitar problemas de WebSockets, adicionamos tratamento de erros robusto
const isProduction = process.env.NODE_ENV === 'production';
if (isProduction) {
  console.log('üîß Ambiente de produ√ß√£o detectado, ajustando configura√ß√µes de conex√£o...');
  
  // Em produ√ß√£o, configuramos para evitar problemas de conex√£o
  // Nota: Algumas configura√ß√µes podem n√£o estar dispon√≠veis em todas as vers√µes
  try {
    // @ts-ignore - Em algumas vers√µes, estas propriedades existem
    neonConfig.pipelineConnect = false; // Mais est√°vel em alguns ambientes
  } catch (e) {
    console.warn('‚ö†Ô∏è Algumas configura√ß√µes de conex√£o podem n√£o estar dispon√≠veis na vers√£o atual.');
  }
} 

// Definir o construtor de WebSocket
neonConfig.webSocketConstructor = ws;

// Tenta obter a DATABASE_URL a partir das vari√°veis de ambiente
let databaseUrl = process.env.DATABASE_URL;

// Se n√£o encontrar DATABASE_URL, tenta construir a partir de vari√°veis individuais
if (!databaseUrl) {
  const dbHost = process.env.DB_HOST;
  const dbPort = process.env.DB_PORT || '5432';
  const dbUser = process.env.DB_USER;
  const dbPassword = process.env.DB_PASSWORD;
  const dbName = process.env.DB_NAME;
  
  if (dbHost && dbUser && dbPassword && dbName) {
    databaseUrl = `postgres://${dbUser}:${dbPassword}@${dbHost}:${dbPort}/${dbName}`;
    console.log(`‚ö° DATABASE_URL constru√≠do a partir de vari√°veis individuais. Utilizando host: ${dbHost}`);
  } else {
    console.error('‚ö†Ô∏è DATABASE_URL n√£o encontrado e n√£o foi poss√≠vel construir a partir de vari√°veis individuais.');
    console.error('Por favor, defina a vari√°vel DATABASE_URL ou as vari√°veis DB_HOST, DB_PORT, DB_USER, DB_PASSWORD e DB_NAME.');
    
    // Em desenvolvimento, podemos definir uma URL para um banco local ou criar uma URL mock
    if (!isProduction) {
      databaseUrl = 'postgres://postgres:postgres@localhost:5432/postgres';
      console.warn('‚ö†Ô∏è Usando uma URL padr√£o para desenvolvimento local. Isso n√£o funcionar√° em produ√ß√£o!');
    } else {
      throw new Error(
        "DATABASE_URL deve ser definido no ambiente. Voc√™ esqueceu de provisionar um banco de dados?"
      );
    }
  }
}

// Configura√ß√£o de pool de conex√µes com op√ß√µes seguras
export const pool = new Pool({ 
  connectionString: databaseUrl,
  max: 10, // m√°ximo de conex√µes no pool
  idleTimeoutMillis: 30000, // tempo m√°ximo que uma conex√£o pode ficar inativa
  connectionTimeoutMillis: 5000, // tempo m√°ximo para estabelecer conex√£o
});

// Evento para monitorar erros na pool de conex√µes
pool.on('error', (err) => {
  console.error('‚ùå Erro inesperado no pool de conex√µes:', err.message);
});

// Cria√ß√£o da inst√¢ncia Drizzle com tratamento de erro melhorado
export const db = drizzle(pool, { schema });